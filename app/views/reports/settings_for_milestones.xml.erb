<settings> 
  <type>column</type>                                         <!-- [column] (column / bar) -->
  <data_type>xml</data_type>                                  <!-- [xml] (xml / csv) -->
  <column>

    <width>85</width>                                         <!-- [80] (0 - 100) width of column (in percents)  -->
    <spacing>0</spacing>                                      <!-- [5] (Number) space between columns of one category axis value, in pixels. Negative values can be used. -->
    <grow_time>1</grow_time>                                  <!-- [0] (Number) grow time in seconds. Leave 0 to appear instantly -->
    <grow_effect/>                               <!-- [elastic] (elastic, regular, strong) -->

    <sequenced_grow>true</sequenced_grow>                     <!-- [false] (true / false) whether columns should grow at the same time or one after another -->    
    <data_labels>
      <![CDATA[]]>                                            <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->

    </data_labels>
    <data_labels_text_color/>         <!-- [text_color] (hex color code) --> 
    <data_labels_text_size/>           <!-- [text_size] (Number) -->
    <data_labels_position/>             <!-- [outside] (inside, outside, above). This setting is only for clustered chart. --> 
                                                              <!-- if you set "above" for column chart, the data label will be displayed inside column, rotated  by 90 degrees -->
    <data_labels_always_on/>           <!-- [false] (true / false) If the data label is placed inside of the bar or column (stacked chart) and the bar or column is too small for the label to fit, it is hidden. If you set this setting to "true", the data labels will always be visible. -->
    <balloon_text>                                                    
     <![CDATA[]]>                                             <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->

    </balloon_text>    
    <link_target/>                               <!-- [] (_blank, _top ...) -->
    <gradient/>                                     <!-- [vertical] (horizontal / vertical) Direction of column gradient. Gradient colors are defined in graph settings below. -->
    <bullet_offset/>                           <!-- [0] (Number) distance from column / bar to the bullet -->
    <hover_brightness>30</hover_brightness>                   <!-- [0] (from -255 to 255) The column may darken/lighten when the use rolls over it. The intensity may be set here -->                         
  </column>
  
  <line>                                                      <!-- Here are general settings for "line" graph type. You can set most of these settings for individual lines in graph settings below -->

    <connect/>                                       <!-- [false] (true / false) whether to connect points if data is missing -->
    <width/>                                           <!-- [2] (Number) line width -->
    <alpha/>                                           <!-- [100] (Number) line alpha -->
    <fill_alpha/>                                 <!-- [0] (Number) fill alpha -->
    <bullet/>                                         <!-- [] (square, round, square_outlined, round_outlined, square_outline, round_outline, filename.swf) can be used predefined bullets or loaded custom bullets. Leave empty if you don't want to have bullets at all. Outlined bullets use plot area color for outline color -->
    <bullet_size/>                               <!-- [8] (Number) bullet size -->

    <data_labels>
       <![CDATA[]]>                                           <!-- [] ({title} {value} {series} {percents} {start} {difference} {total}) You can format any data label: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
    </data_labels>
    <data_labels_text_color/>         <!-- [text_color] (hex color code) --> 
    <data_labels_text_size/>           <!-- [text_size] (Number) -->
    <balloon_text>                                                    
      <![CDATA[]]>                                            <!-- [] use the same formatting rules as for data labels -->
    </balloon_text>      
    <link_target/>                               <!-- [] (_blank, _top ...) -->

  </line>
    
  <background>                                                <!-- BACKGROUND -->
    <color/>                                           <!-- [#FFFFFF] (hex color code) Separate color codes with comas for gradient -->
    <alpha/>                                           <!-- [0] (0 - 100) use 0 if you are using custom swf or jpg for background -->
    <border_color/>                             <!-- [#000000] (hex color code) -->
    <border_alpha>15</border_alpha>                           <!-- [0] (0 - 100) -->

    <file/>                                             <!-- [] (filename) swf or jpg file of a background. Do not use progressive jpg file, it will be not visible with flash player 7 -->
                                                              <!-- The chart will look for this file in "path" folder ("path" is set in HTML) -->
  </background>
     
  <plot_area>                                                 <!-- PLOT AREA (the area between axes) -->
    <color/>                                           <!-- [#FFFFFF](hex color code) Separate color codes with comas for gradient -->
    <alpha/>                                           <!-- [0] (0 - 100) if you want it to be different than background color, use bigger than 0 value -->
    <border_color/>                             <!-- [#000000] (hex color code) -->                                        
    <border_alpha/>                             <!-- [0] (0 - 100) -->                                            
    <margins>                                                 <!-- plot area margins -->

      <left>70</left>                                         <!-- [60](Number / Number%) --> 
      <top>60</top>                                           <!-- [60](Number / Number%) --> 
      <right>50</right>                                       <!-- [60](Number / Number%) -->
      <bottom>80</bottom>                                     <!-- [80](Number / Number%) -->
    </margins>
  </plot_area>

  
  <grid>                                                      <!-- GRID -->
    <category>                                                <!-- category axis grid -->                                                     
      <color/>                                         <!-- [#000000] (hex color code) -->
      <alpha>5</alpha>                                        <!-- [15] (0 - 100) -->
      <dashed/>                                       <!-- [false](true / false) -->
      <dash_length/>                             <!-- [5] (Number) -->

    </category>
    <value>                                                   <!-- value axis grid -->      
      <color/>                                         <!-- [#000000] (hex color code) -->
      <alpha>0</alpha>                                        <!-- [15] (0 - 100) -->
      <dashed/>                                       <!-- [false] (true / false) -->
      <dash_length/>                             <!-- [5] (Number) -->

      <approx_count/>                           <!-- [10] (Number) approximate number of gridlines -->
      <fill_color>000000</fill_color>                         <!-- [#FFFFFF] (hex color code) every second area between gridlines will be filled with this color (you will need to set fill_alpha > 0) -->
      <fill_alpha>5</fill_alpha>                              <!-- [0] (0 - 100) opacity of fill -->
    </value>
  </grid>
  

  
  <axes>                                                      <!-- axes -->
    <category>                                                <!-- category axis -->
      <color/>                                         <!-- [#000000] (hex color code) -->
      <alpha/>                                         <!-- [100] (0 - 100) -->

      <width>1</width>                                        <!-- [2] (Number) line width, 0 for hairline -->
      <tick_length/>                             <!-- [7] (Number) -->
    </category>
    <value>                                                   <!-- value axis -->
      <color/>                                         <!-- [#000000] (hex color code) -->
      <alpha/>                                         <!-- [100] (0 - 100) -->

      <width>1</width>                                        <!-- [2] (Number) line width, 0 for hairline -->
      <tick_length/>                             <!-- [7] (Number) -->
      <logarithmic/>                             <!-- [false] (true / false) If set to true, this axis will use logarithmic scale instead of linear -->
    </value>
  </axes>  
  
  <balloon>                                                   <!-- BALLOON -->
    <enabled/>                                       <!-- [true] (true / false) -->

    <color/>                                           <!-- [] (hex color code) balloon background color. If empty, slightly darker then current column color will be used -->
    <alpha>85</alpha>                                         <!-- [100] (0 - 100) -->
    <text_color/>                                 <!-- [#FFFFFF] (hex color code) -->
    <text_size/>                                   <!-- [text_size] (Number) -->
    <max_width/>                                   <!-- [220] (Number) The maximum width of a balloon -->
    <corner_radius/>                           <!-- [0] (Number) Corner radius of a balloon. If you set it > 0, the balloon will not display arrow -->

    <border_width/>                             <!-- [0] (Number) -->
    <border_alpha/>                             <!-- [balloon.alpha] (Number) -->
    <border_color/>                             <!-- [balloon.color] (hex color code) -->
  </balloon>
    
  <legend>                                                    <!-- LEGEND -->
    <enabled>false</enabled>                                  <!-- [true] (true / false) -->

    <x/>                                                   <!-- [] (Number / Number% / !Number) if empty, will be equal to left margin -->
    <y/>                                                   <!-- [] (Number / Number% / !Number) if empty, will be below plot area -->
    <width/>                                           <!-- [] (Number / Number%) if empty, will be equal to plot area width -->
    <max_columns/>                               <!-- [] (Number) the maximum number of columns in the legend -->    
    <color/>                                           <!-- [#FFFFFF] (hex color code) background color. Separate color codes with comas for gradient -->
    <alpha/>                                           <!-- [0] (0 - 100) background alpha -->

    <border_color/>                             <!-- [#000000] (hex color code) border color -->
    <border_alpha/>                             <!-- [0] (0 - 100) border alpha -->
    <text_color/>                                 <!-- [text_color] (hex color code) -->   
    <text_size/>                                   <!-- [text_size] (Number) -->
    <spacing/>                                       <!-- [10] (Number) vertical and horizontal gap between legend entries -->
    <margins/>                                       <!-- [0] (Number) legend margins (space between legend border and legend entries, recommended to use only if legend border is visible or background color is different from chart area background color) -->

    <reverse_order/>                           <!-- [false] (true / false) whether to sort legend entries in a reverse order -->        
    <align/>                                           <!-- [left] (left / center / right) alignment of legend entries -->
    <key>                                                     <!-- KEY (the color box near every legend entry) -->
      <size/>                                           <!-- [16] (Number) key size-->
      <border_color/>                           <!-- [] (hex color code) leave empty if you don't want to have border -->
    </key>
  </legend>
  
  <graphs> 
    <graph gid="1">                                            <!-- if you are using XML data file, graph "gid" must match graph "gid" in data file -->

      <type>column</type>                                      <!-- [column] (column/line) -->                  
      <title>完成时间（小时）</title>                                   <!-- [] (graph title) -->
      <color>B92F2F</color>                                    <!-- [] (hex color code) -->
      <balloon_text>
        <![CDATA[{series}: {value}小时]]>              <!-- [column(line).balloon.text] ({title} {value} {series} {description} {percents}) You can format any balloon text: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
      </balloon_text>       
    </graph>

    <graph gid="2">
      <type>line</type>                                     
      <title>完成时间（天）</title>                               
      <color/>                                   
      <alpha/>

      <balloon_text>
        <![CDATA[{series}: {value}天]]>  <!-- [column(line).balloon.text] ({title} {value} {series} {description} {percents}) You can format any balloon text: {title} will be replaced with real title, {value} - with value and so on. You can add your own text or html code too. -->
      </balloon_text>                                        
    </graph>
  </graphs>
	
</settings>